{"ast":null,"code":"var _jsxFileName = \"/Users/oleksiimarchenko/Documents/React/webinars/webinar_26-09-2020/Project/Packman/src/components/Ghost/Ghost.js\";\nimport React, { Component } from \"react\";\nimport { ReactComponent as GhostSvg } from \"@svgr/webpack?-svgo,+titleProp,+ref!./ghost.svg\";\nimport \"./style.css\";\n\nclass Ghost extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isActive: true,\n      direction: \"left\",\n      position: {\n        top: 500,\n        left: 200\n      }\n    };\n\n    this.changeDirection = () => {\n      const arrayOfMovement = [\"left\", \"up\", \"down\", \"right\"];\n      const movement = Math.floor(Math.random() * 4);\n      const {\n        position\n      } = this.state;\n      const {\n        top: currentTop,\n        left: currentLeft\n      } = position;\n      this.setState({\n        direction: arrayOfMovement[movement]\n      });\n      this.props.getGhostPosition(currentTop, currentLeft);\n    };\n\n    this.move = () => {\n      const {\n        top: currentTop,\n        left: currentLeft\n      } = this.state.position;\n      const {\n        direction\n      } = th;\n      const {\n        step,\n        border,\n        size,\n        topScoreBoardHeight\n      } = this.props;\n\n      if (direction === \"up\") {\n        this.setState({\n          position: {\n            // top: currentTop - step,\n            top: Math.max(currentTop - step, 0),\n            left: currentLeft\n          }\n        });\n      } else if (direction === \"right\") {\n        this.setState({\n          position: {\n            top: currentTop,\n            // left: currentLeft + step\n            left: Math.min(currentLeft + step, window.innerWidth - border - size)\n          }\n        });\n      } else if (direction === \"down\") {\n        this.setState({\n          position: {\n            // top: currentTop + step,\n            top: Math.min(currentTop + step, window.innerHeight - border - size - topScoreBoardHeight),\n            left: currentLeft\n          }\n        });\n      } else if (direction === \"left\") {\n        this.setState({\n          position: {\n            top: currentTop,\n            // left: currentLeft - step\n            left: Math.max(currentLeft - step, 0)\n          }\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.changeDirectionInterval = setInterval(this.changeDirection, 2000);\n    this.moveInterval = setInterval(this.move, 2000);\n  }\n\n  disableGhost() {\n    const {\n      isActive\n    } = this.state;\n\n    if (isActive) {\n      this.componentWillUnmount();\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.changeDirectionInterval);\n    clearInterval(this.moveInterval);\n  }\n\n  render() {\n    const {\n      color\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: this.state.position,\n      className: \"ghost\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(GhostSvg, {\n      className: `ghost-${color}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default Ghost;","map":{"version":3,"sources":["/Users/oleksiimarchenko/Documents/React/webinars/webinar_26-09-2020/Project/Packman/src/components/Ghost/Ghost.js"],"names":["React","Component","Ghost","state","isActive","direction","position","top","left","changeDirection","arrayOfMovement","movement","Math","floor","random","currentTop","currentLeft","setState","props","getGhostPosition","move","th","step","border","size","topScoreBoardHeight","max","min","window","innerWidth","innerHeight","componentDidMount","changeDirectionInterval","setInterval","moveInterval","disableGhost","componentWillUnmount","clearInterval","render","color"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,OAAO,aAAP;;AACA,MAAMC,KAAN,SAAoBD,SAApB,CAA8B;AAAA;AAAA;AAAA,SAC5BE,KAD4B,GACpB;AACNC,MAAAA,QAAQ,EAAE,IADJ;AAENC,MAAAA,SAAS,EAAE,MAFL;AAGNC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,GAAG,EAAE,GADG;AAERC,QAAAA,IAAI,EAAE;AAFE;AAHJ,KADoB;;AAAA,SAyB5BC,eAzB4B,GAyBV,MAAM;AACtB,YAAMC,eAAe,GAAG,CAAC,MAAD,EAAS,IAAT,EAAe,MAAf,EAAuB,OAAvB,CAAxB;AACA,YAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAjB;AACA,YAAM;AAAER,QAAAA;AAAF,UAAe,KAAKH,KAA1B;AACA,YAAM;AAAEI,QAAAA,GAAG,EAAEQ,UAAP;AAAmBP,QAAAA,IAAI,EAAEQ;AAAzB,UAAyCV,QAA/C;AACA,WAAKW,QAAL,CAAc;AAAEZ,QAAAA,SAAS,EAAEK,eAAe,CAACC,QAAD;AAA5B,OAAd;AACA,WAAKO,KAAL,CAAWC,gBAAX,CAA4BJ,UAA5B,EAAwCC,WAAxC;AACD,KAhC2B;;AAAA,SAkC5BI,IAlC4B,GAkCrB,MAAM;AACX,YAAK;AAACb,QAAAA,GAAG,EAACQ,UAAL;AAAgBP,QAAAA,IAAI,EAACQ;AAArB,UAAoC,KAAKb,KAAL,CAAWG,QAApD;AACA,YAAM;AAACD,QAAAA;AAAD,UAAYgB,EAAlB;AACA,YAAM;AAAEC,QAAAA,IAAF;AAAQC,QAAAA,MAAR;AAAgBC,QAAAA,IAAhB;AAAsBC,QAAAA;AAAtB,UAA8C,KAAKP,KAAzD;;AAEA,UAAIb,SAAS,KAAK,IAAlB,EAAwB;AACtB,aAAKY,QAAL,CAAc;AACZX,UAAAA,QAAQ,EAAE;AACR;AACAC,YAAAA,GAAG,EAAEK,IAAI,CAACc,GAAL,CAASX,UAAU,GAAGO,IAAtB,EAA4B,CAA5B,CAFG;AAGRd,YAAAA,IAAI,EAAEQ;AAHE;AADE,SAAd;AAOD,OARD,MAQO,IAAIX,SAAS,KAAK,OAAlB,EAA2B;AAChC,aAAKY,QAAL,CAAc;AACZX,UAAAA,QAAQ,EAAE;AACRC,YAAAA,GAAG,EAAEQ,UADG;AAER;AACAP,YAAAA,IAAI,EAAEI,IAAI,CAACe,GAAL,CAASX,WAAW,GAAGM,IAAvB,EAA6BM,MAAM,CAACC,UAAP,GAAoBN,MAApB,GAA6BC,IAA1D;AAHE;AADE,SAAd;AAOD,OARM,MAQA,IAAInB,SAAS,KAAK,MAAlB,EAA0B;AAC/B,aAAKY,QAAL,CAAc;AACZX,UAAAA,QAAQ,EAAE;AACR;AACAC,YAAAA,GAAG,EAAEK,IAAI,CAACe,GAAL,CACHZ,UAAU,GAAGO,IADV,EAEHM,MAAM,CAACE,WAAP,GAAqBP,MAArB,GAA8BC,IAA9B,GAAqCC,mBAFlC,CAFG;AAMRjB,YAAAA,IAAI,EAAEQ;AANE;AADE,SAAd;AAUD,OAXM,MAWA,IAAIX,SAAS,KAAK,MAAlB,EAA0B;AAC/B,aAAKY,QAAL,CAAc;AACZX,UAAAA,QAAQ,EAAE;AACRC,YAAAA,GAAG,EAAEQ,UADG;AAER;AACAP,YAAAA,IAAI,EAAEI,IAAI,CAACc,GAAL,CAASV,WAAW,GAAGM,IAAvB,EAA6B,CAA7B;AAHE;AADE,SAAd;AAOD;AACF,KA3E2B;AAAA;;AAU5BS,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,uBAAL,GAA+BC,WAAW,CAAC,KAAKxB,eAAN,EAAuB,IAAvB,CAA1C;AACA,SAAKyB,YAAL,GAAoBD,WAAW,CAAC,KAAKb,IAAN,EAAY,IAAZ,CAA/B;AACD;;AACDe,EAAAA,YAAY,GAAG;AACb,UAAM;AAAE/B,MAAAA;AAAF,QAAe,KAAKD,KAA1B;;AACA,QAAIC,QAAJ,EAAc;AACZ,WAAKgC,oBAAL;AACD;AACF;;AACDA,EAAAA,oBAAoB,GAAG;AACrBC,IAAAA,aAAa,CAAC,KAAKL,uBAAN,CAAb;AACAK,IAAAA,aAAa,CAAC,KAAKH,YAAN,CAAb;AACD;;AAsDDI,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAY,KAAKrB,KAAvB;AACA,wBACE;AAAK,MAAA,KAAK,EAAE,KAAKf,KAAL,CAAWG,QAAvB;AAAiC,MAAA,SAAS,EAAC,OAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,QAAD;AAAU,MAAA,SAAS,EAAG,SAAQiC,KAAM,EAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAKD;;AApF2B;;AAyF9B,eAAerC,KAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { ReactComponent as GhostSvg } from \"./ghost.svg\";\nimport \"./style.css\";\nclass Ghost extends Component {\n  state = {\n    isActive: true,\n    direction: \"left\",\n    position: {\n      top: 500,\n      left: 200,\n    },\n  };\n\n  componentDidMount() {\n    this.changeDirectionInterval = setInterval(this.changeDirection, 2000);\n    this.moveInterval = setInterval(this.move, 2000);\n  }\n  disableGhost() {\n    const { isActive } = this.state;\n    if (isActive) {\n      this.componentWillUnmount();\n    }\n  }\n  componentWillUnmount() {\n    clearInterval(this.changeDirectionInterval);\n    clearInterval(this.moveInterval);\n  }\n\n  changeDirection = () => {\n    const arrayOfMovement = [\"left\", \"up\", \"down\", \"right\"];\n    const movement = Math.floor(Math.random() * 4);\n    const { position } = this.state;\n    const { top: currentTop, left: currentLeft } = position;\n    this.setState({ direction: arrayOfMovement[movement] });\n    this.props.getGhostPosition(currentTop, currentLeft);\n  };\n\n  move = () => {\n    const{top:currentTop,left:currentLeft} = this.state.position;\n    const {direction}=th\n    const { step, border, size, topScoreBoardHeight } = this.props;\n\n    if (direction === \"up\") {\n      this.setState({\n        position: {\n          // top: currentTop - step,\n          top: Math.max(currentTop - step, 0),\n          left: currentLeft,\n        },\n      });\n    } else if (direction === \"right\") {\n      this.setState({\n        position: {\n          top: currentTop,\n          // left: currentLeft + step\n          left: Math.min(currentLeft + step, window.innerWidth - border - size),\n        },\n      });\n    } else if (direction === \"down\") {\n      this.setState({\n        position: {\n          // top: currentTop + step,\n          top: Math.min(\n            currentTop + step,\n            window.innerHeight - border - size - topScoreBoardHeight\n          ),\n          left: currentLeft,\n        },\n      });\n    } else if (direction === \"left\") {\n      this.setState({\n        position: {\n          top: currentTop,\n          // left: currentLeft - step\n          left: Math.max(currentLeft - step, 0),\n        },\n      });\n    }\n  };\n\n  render() {\n    const { color } = this.props;\n    return (\n      <div style={this.state.position} className=\"ghost\">\n        <GhostSvg className={`ghost-${color}`} />\n      </div>\n    );\n  }\n}\n\n\n\nexport default Ghost;\n"]},"metadata":{},"sourceType":"module"}