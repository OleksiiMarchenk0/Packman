{"ast":null,"code":"var _jsxFileName = \"/Users/oleksiimarchenko/Documents/React/webinars/webinar  26-09-2020/Project/Packman/src/components/Ghost/Ghost.js\";\nimport React, { Component } from 'react';\nimport { ReactComponent as GhostSvg } from \"@svgr/webpack?-svgo,+titleProp,+ref!./ghost.svg\";\nimport './style.css';\n\nclass Ghost extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      direction: 'left',\n      position: {\n        top: 50 * 3,\n        left: 50 * 3\n      }\n    };\n\n    this.changeDirection = () => {\n      const arrayOfMovement = ['left', 'up', 'down', 'right'];\n      const movement = Math.floor(Math.random() * 4);\n      this.setState({\n        direction: arrayOfMovement[movement]\n      });\n      console.log(\"Ghost\", this.state.position);\n      this.props.getGhostPosition(currentTop, currentLeft);\n    };\n\n    this.move = () => {\n      // TODO: refactor\n      const currentTop = this.state.position.top;\n      const currentLeft = this.state.position.left;\n      const {\n        direction\n      } = this.state;\n      const {\n        step,\n        border,\n        size,\n        topScoreBoardHeight\n      } = this.props;\n\n      if (direction === 'up') {\n        this.setState({\n          position: {\n            // top: currentTop - step,\n            top: Math.max(currentTop - step, 0),\n            left: currentLeft\n          }\n        });\n      } else if (direction === 'right') {\n        this.setState({\n          position: {\n            top: currentTop,\n            // left: currentLeft + step\n            left: Math.min(currentLeft + step, window.innerWidth - border - size)\n          }\n        });\n      } else if (direction === 'down') {\n        this.setState({\n          position: {\n            // top: currentTop + step,\n            top: Math.min(currentTop + step, window.innerHeight - border - size - topScoreBoardHeight),\n            left: currentLeft\n          }\n        });\n      } else if (direction === 'left') {\n        this.setState({\n          position: {\n            top: currentTop,\n            // left: currentLeft - step\n            left: Math.max(currentLeft - step, 0)\n          }\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.changeDirectionInterval = setInterval(this.changeDirection, 2000);\n    this.moveInterval = setInterval(this.move, 2000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.changeDirectionInterval);\n    clearInterval(this.moveInterval);\n  }\n\n  render() {\n    const {\n      color\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: this.state.position,\n      className: \"ghost\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(GhostSvg, {\n      className: `ghost-${color}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nGhost.defaultProps = {\n  color: 'pink',\n  step: 50,\n  // 50px\n  size: 50,\n  // ghost size: 50x50px\n  // TODO: move to config\n  border: 10 * 2,\n  topScoreBoardHeight: 50\n};\nexport default Ghost;","map":{"version":3,"sources":["/Users/oleksiimarchenko/Documents/React/webinars/webinar  26-09-2020/Project/Packman/src/components/Ghost/Ghost.js"],"names":["React","Component","Ghost","state","direction","position","top","left","changeDirection","arrayOfMovement","movement","Math","floor","random","setState","console","log","props","getGhostPosition","currentTop","currentLeft","move","step","border","size","topScoreBoardHeight","max","min","window","innerWidth","innerHeight","componentDidMount","changeDirectionInterval","setInterval","moveInterval","componentWillUnmount","clearInterval","render","color","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { ReactComponent as GhostSvg } from './ghost.svg';\nimport './style.css';\nclass Ghost extends Component {\n\n  state = {\n    direction: 'left',\n    position: {\n      top: 50 * 3,\n      left: 50 * 3\n    }\n  }\n\n  componentDidMount() {\n    this.changeDirectionInterval = setInterval(this.changeDirection, 2000);\n    this.moveInterval = setInterval(this.move, 2000);\n   \n  }\n\n  componentWillUnmount() {\n    clearInterval(this.changeDirectionInterval);\n    clearInterval(this.moveInterval);\n  }\n\n  changeDirection = () => {\n    const arrayOfMovement = ['left', 'up', 'down', 'right'];\n    const movement = Math.floor(Math.random() * 4);\n\n    this.setState({ direction: arrayOfMovement[movement] });\n    console.log(\"Ghost\",this.state.position)\n    this.props.getGhostPosition(currentTop, currentLeft);\n    \n  }\n\n  move = () => {\n    // TODO: refactor\n\n    const currentTop = this.state.position.top;\n    const currentLeft = this.state.position.left;\n    const { direction } = this.state;\n    const { step, border, size, topScoreBoardHeight } = this.props;\n\n    if (direction === 'up') {\n      this.setState({\n        position: {\n          // top: currentTop - step,\n          top: Math.max(currentTop - step, 0),\n          left: currentLeft\n        }\n      });\n    } else if (direction === 'right') {\n      this.setState({\n        position: {\n          top: currentTop,\n          // left: currentLeft + step\n          left: Math.min(currentLeft + step, window.innerWidth - border - size)\n        }\n      });\n    } else if (direction === 'down') {\n      this.setState({\n        position: {\n          // top: currentTop + step,\n          top: Math.min(currentTop + step, window.innerHeight - border - size - topScoreBoardHeight),\n          left: currentLeft\n        }\n      });\n    } else if (direction === 'left') {\n      this.setState({\n        position: {\n          top: currentTop,\n          // left: currentLeft - step\n          left: Math.max(currentLeft - step, 0)\n        }\n      });\n    }\n\n  }\n\n  render() {\n    const { color } = this.props;\n    return (\n      <div style={this.state.position} className=\"ghost\">\n        <GhostSvg className={`ghost-${color}`} />\n      </div>\n    )\n  }\n}\n\nGhost.defaultProps = {\n  color: 'pink',\n  step: 50, // 50px\n  size: 50, // ghost size: 50x50px\n  // TODO: move to config\n  border: 10 * 2,\n  topScoreBoardHeight: 50\n}\n\nexport default Ghost;\n"]},"metadata":{},"sourceType":"module"}