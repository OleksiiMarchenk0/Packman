{"ast":null,"code":"var _jsxFileName = \"/Users/oleksiimarchenko/Documents/React/webinars/webinar_26-09-2020/Project/Packman/src/components/Ghost/Ghost.js\";\nimport React, { Component } from 'react';\nimport { ReactComponent as GhostSvg } from \"@svgr/webpack?-svgo,+titleProp,+ref!./ghost.svg\";\nimport './style.css';\n\nclass Ghost extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isActive: false,\n      direction: 'left',\n      position: {\n        top: 500,\n        left: 200\n      }\n    };\n\n    this.changeDirection = () => {\n      const arrayOfMovement = ['left', 'up', 'down', 'right'];\n      const movement = Math.floor(Math.random() * 4);\n      const {\n        position\n      } = this.state;\n      const {\n        top: currentTop,\n        left: currentLeft\n      } = position;\n      this.setState({\n        direction: arrayOfMovement[movement]\n      });\n      this.props.getGhostPosition(currentTop, currentLeft);\n    };\n\n    this.move = () => {\n      // TODO: refactor\n      const currentTop = this.state.position.top;\n      const currentLeft = this.state.position.left;\n      const {\n        direction\n      } = this.state;\n      const {\n        step,\n        border,\n        size,\n        topScoreBoardHeight\n      } = this.props;\n\n      if (direction === 'up') {\n        this.setState({\n          position: {\n            // top: currentTop - step,\n            top: Math.max(currentTop - step, 0),\n            left: currentLeft\n          }\n        });\n      } else if (direction === 'right') {\n        this.setState({\n          position: {\n            top: currentTop,\n            // left: currentLeft + step\n            left: Math.min(currentLeft + step, window.innerWidth - border - size)\n          }\n        });\n      } else if (direction === 'down') {\n        this.setState({\n          position: {\n            // top: currentTop + step,\n            top: Math.min(currentTop + step, window.innerHeight - border - size - topScoreBoardHeight),\n            left: currentLeft\n          }\n        });\n      } else if (direction === 'left') {\n        this.setState({\n          position: {\n            top: currentTop,\n            // left: currentLeft - step\n            left: Math.max(currentLeft - step, 0)\n          }\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.changeDirectionInterval = setInterval(this.changeDirection, 2000);\n    this.moveInterval = setInterval(this.move, 2000);\n  }\n\n  disableGhost() {\n    console.warn(\"ok\");\n    const {\n      isActive\n    } = this.state;\n\n    if (!isActive) {\n      clearInterval(this.moveInterval);\n      clearInterval(this.changeDirectionInterval);\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.changeDirectionInterval);\n    clearInterval(this.moveInterval);\n  }\n\n  render() {\n    const {\n      color\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: this.state.position,\n      className: \"ghost\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(GhostSvg, {\n      className: `ghost-${color}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nGhost.defaultProps = {\n  color: 'pink',\n  step: 50,\n  // 50px\n  size: 50,\n  // ghost size: 50x50px\n  // TODO: move to config\n  border: 10 * 2,\n  topScoreBoardHeight: 50\n};\nexport default Ghost;","map":{"version":3,"sources":["/Users/oleksiimarchenko/Documents/React/webinars/webinar_26-09-2020/Project/Packman/src/components/Ghost/Ghost.js"],"names":["React","Component","Ghost","state","isActive","direction","position","top","left","changeDirection","arrayOfMovement","movement","Math","floor","random","currentTop","currentLeft","setState","props","getGhostPosition","move","step","border","size","topScoreBoardHeight","max","min","window","innerWidth","innerHeight","componentDidMount","changeDirectionInterval","setInterval","moveInterval","disableGhost","console","warn","clearInterval","componentWillUnmount","render","color","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { ReactComponent as GhostSvg } from './ghost.svg';\nimport './style.css';\nclass Ghost extends Component {\n\n  state = {\n    isActive:false,\n    direction: 'left',\n    position: {\n      top: 500,\n      left:200,\n    }\n  }\n\n  componentDidMount() {\n    this.changeDirectionInterval = setInterval(this.changeDirection, 2000);\n    this.moveInterval = setInterval(this.move, 2000);\n   \n  }\ndisableGhost(){\n  console.warn(\"ok\")\n  const {isActive}=this.state;\n  if(!isActive){\n    clearInterval(this.moveInterval);\n    clearInterval(this.changeDirectionInterval);\n  }\n}\n  componentWillUnmount() {\n    clearInterval(this.changeDirectionInterval);\n    clearInterval(this.moveInterval);\n  }\n\n  changeDirection = () => {\n    const arrayOfMovement = ['left', 'up', 'down', 'right'];\n    const movement = Math.floor(Math.random() * 4);\n    const { position } = this.state;\n    const {top:currentTop,left:currentLeft} = position;\n    this.setState({ direction: arrayOfMovement[movement] });\n    this.props.getGhostPosition(currentTop, currentLeft);\n    \n  }\n\n  move = () => {\n    // TODO: refactor\n\n    const currentTop = this.state.position.top;\n    const currentLeft = this.state.position.left;\n    const { direction } = this.state;\n    const { step, border, size, topScoreBoardHeight } = this.props;\n\n    if (direction === 'up') {\n      this.setState({\n        position: {\n          // top: currentTop - step,\n          top: Math.max(currentTop - step, 0),\n          left: currentLeft\n        }\n      });\n    } else if (direction === 'right') {\n      this.setState({\n        position: {\n          top: currentTop,\n          // left: currentLeft + step\n          left: Math.min(currentLeft + step, window.innerWidth - border - size)\n        }\n      });\n    } else if (direction === 'down') {\n      this.setState({\n        position: {\n          // top: currentTop + step,\n          top: Math.min(currentTop + step, window.innerHeight - border - size - topScoreBoardHeight),\n          left: currentLeft\n        }\n      });\n    } else if (direction === 'left') {\n      this.setState({\n        position: {\n          top: currentTop,\n          // left: currentLeft - step\n          left: Math.max(currentLeft - step, 0)\n        }\n      });\n    }\n\n  }\n\n  render() {\n    const { color } = this.props;\n    return (\n      <div style={this.state.position} className=\"ghost\">\n        <GhostSvg className={`ghost-${color}`} />\n      </div>\n    )\n  }\n}\n\nGhost.defaultProps = {\n  color: 'pink',\n  step: 50, // 50px\n  size: 50, // ghost size: 50x50px\n  // TODO: move to config\n  border: 10 * 2,\n  topScoreBoardHeight: 50\n}\n\nexport default Ghost;\n"]},"metadata":{},"sourceType":"module"}